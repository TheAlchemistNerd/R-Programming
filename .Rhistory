summer_depart_count
size(summer_depart)
str(summer_depart)
nrows(summer_depart)
nrow(summer_depart)
detach("package:tidyverse", unload=TRUE)
detach("package:tidyr", unload=TRUE)
# mutate function business example
daydollars <- gapminder %>%
filter(continent == "Africa" & year == 2010 & !is.na(gdp)) %>%
mutate(dollars_per_day = gdp/population/365)
# mutate function business example
library("gapminder")
daydollars <- gapminder %>%
filter(continent == "Africa" & year == 2010 & !is.na(gdp)) %>%
mutate(dollars_per_day = gdp/population/365
)
rlang::last_error()
## Question 1
library("tidyverse")
library("tidytext")
reviews <- read.csv("C:/Users/qwert/Desktop/Assignments/New folder/reviews_fce1fe3601430061b509803e1bfff2f9.csv",header = T, sep = ",")
# (i)
reviews <- reviews %>%
group_by(Stars) %>%
mutate(stars_mean = mean(Stars))
# Question 3
library("nycflights13")
View(flights)
furthest <- subset(flights, distance == max(distance), select=c(origin, dest, distance))
furthest
shortest <- subset(flights, distance == min(distance), select=c(origin, dest, distance))
shortest
summer_depart <- filter(flights, month %in% 7:9)
nrow(summer_depart)
# mutate function business example
library("gapminder")
daydollars <- gapminder %>%
filter(continent == "Africa" & year == 2010 & !is.na(gdp)) %>%
mutate(dollars_per_day = gdp/population/365)
# mutate function business example
library("gapminder")
daydollars <- gapminder %>%
filter(continent == "Africa" & year == 2010 & !is.na(gdpPercap)) %>%
mutate(dollars_per_day = gdp/population/365)
library("gapminder")
daydollars <- gapminder %>%
filter(continent == "Africa" & year == 2010 & !is.na(gdpPercap)) %>%
mutate(dollars_per_day = gdpPercap/population/365)
View(planes)
View(weather)
ValidatePrimKey(x=plnes, prim.key="tailnum")
any(grepl("rjson", installed.packages()))
if (any(grepl("rjson", installed.packages()))) {
library("rjson")
} else {
install.packages("rjson")
}
if (any(grepl("rjson", installed.packages()))) {
library("rjson")
} else {
install.packages("rjson")
}
fpl <- fromJSON(file = 'C:/Users/qwert/Desktop/fantasy_pl/APIs_and_JSON/fpl.json')
View(fpl)
fpl_df <- as.data.frame(fpl)
fpl_df
library("tidyverse")
fpl_df <- tibble(fpl)
View(fpl_df)
print(head(fpl))
fpl_df <- as.data.frame.list(fpl)
?as.data.frame.list()
fpl_df <- as.data.frame.list(fpl,stringsAsFactors = F, make.names(unique = T),fix.empty.names = T, optional = T)
fpl_df <- as.data.frame.list(fpl,stringsAsFactors = F, make.names(*,unique = T),fix.empty.names = T, optional = T)
fpl_df <- as.data.frame.list(fpl,stringsAsFactors = F,fix.empty.names = T, optional = T)
fpl_df <- as.data.frame.list(fpl,stringsAsFactors = F,fix.empty.names = T, optional = F)
View(fpl_df)
fpl <- fromJSON(file = 'C:/Users/qwert/Desktop/fantasy_pl/FantasyPremierLeague.py/output/allPlayersInfo.json')
fpl_df <- as.data.frame.list(fpl,stringsAsFactors = F,fix.empty.names = T)
head(fpl_df)
View(fpl)
View(fpl)
fpl <- fromJSON(file = 'C:/Users/qwert/Desktop/fantasy_pl/FantasyPremierLeague.py/output/allPlayersInfo.json')
colors <- read.csv("http:/users.stat.ufl.edu/~winner/data/interference.csv", stringsAsFactors = T)
colors <- read.csv("http:/users.stat.ufl.edu/~winner/data/interference.csv", stringsAsFactors = T)
colors <- read.csv("C:/Users/qwert/Downloads/interference.csv", stringsAsFactors = T)
colors
head(colors)
?t.test
View(colors)
t.test(colors$DiffCol,colors$Black alternative = "two-sided",paired = T)
t.test(colors$DiffCol,colors$Black, alternative = "two-sided",paired = T)
t.test(colors$DiffCol,colors$Black, alternative = "two-sided",paired = T)
t.test(colors$DiffCol,colors$Black, alternative = "two.sided",paired = T)
data(mtcars)
View(mtcars)
install.packages()
install.packages("expss")
install.packages("expss")
install.packages("expss")
any(grepl("expss", installed.packages()))
install.packages("expss")
library(expss)
data(mtcars)
mtcars = apply_labels(mtcars,
mpg = "Miles/(US) gallon",
cyl = "Number of cylinders",
disp = "Displacement (cu.in.)",
hp = "Gross horsepower",
drat = "Rear axle ratio",
wt = "Weight (1000 lbs)",
qsec = "1/4 mile time",
vs = "Engine",
vs = c("V-engine" = 0,
"Straight engine" = 1),
am = "Transmission",
am = c("Automatic" = 0,
"Manual"=1),
gear = "Number of forward gears",
carb = "Number of carburetors"
)
head(mtcars)
table(mtcars$cyl~mtcars$am)
table(mtcars$cyl,mtcars$am)
with(mtcars,
table(cyl, am))
cyl_am <- with(mtcars,
table(cyl, am))
cyl_am
cyl_am %>%
Total <- rbind(sum(Automatic), sum(Manual))
cyl_am %>%
Total <- rbind(sum(mtcars$Automatic), sum(mtcars$Manual))
with(cyl_am,
rbind(sum(mtcars$Automatic), sum(mtcars$Manual)))
rbind(c(sum(mtcars$Automatic), sum(mtcars$Manual)))
with(cyl_am,
rbind(c(sum(mtcars$Automatic), sum(mtcars$Manual))))
data <- c(45, 48, 62, 70, 73, 74, 74, 78, 78, 79, 79, 80, 80, 80, 80, 80, 80, 81, 82, 82)
data
plot(data)
plot(data, ylim = c(40, 85))
boxplot(data)
boxplot(data, ylim = c(40, 85))
fivenum(data)
dnorm(1.25, lower.tail = T)
library(tigerstats)
pnormGC(c(25, 30), region = "between", mean = 22, sd = 4, graph = T)
library(tigerstats)
pnormGC(c(25, 30), region = "between", mean = 22, sd = 4, graph = T)
pnormGC(30, region = "above", mean = 22, sd = 4, graph = T)
qnormGC(0.05, region = "below",mean = 22, sd = 4, graph = T)
pnormGC(50, region = "above", mean = 49, sd = 5, graph = T)
pnormGC(8, region = "below", mean = 7.65, sd = 0.1954, graph = T)
pnormGC(8, region = "below", mean = 7.65, sd = 2.15, graph = T)
pnormGC(50, region = "above", mean = 49, sd = 0.559, graph = T)
qnorm(0.10)
qnorm(0.10,lower.tail = F)
qnormGC(0.1, region = "between",mean = 0, sd = 1, graph = T)
qnormGC(0.1, region = "between",mean = 6.78, sd = 1.77/sqrt(40), graph = T)
qnormGC(0.1, region = "between",mean = 7.62, sd = 1.77/sqrt(40), graph = T)
qnormGC(0.05, region = "between",mean = 7.62, sd = 1.77/sqrt(40), graph = T)
qnormGC(0.05, region = "between",mean = 6.78, sd = 1.77/sqrt(40), graph = T)
par(mfrow = c(3, 4))
# top panel
qqnorm(rnorm(10)); qqnorm(rnorm(10)); qqnorm(rnorm(10)); qqnorm(rnorm(10))
# middle panel
qqnorm(rnorm(100)); qqnorm(rnorm(100)); qqnorm(rnorm(100)); qqnorm(rnorm(100))
# bottom panel
qqnorm(rnorm(1000)); qqnorm(rnorm(1000)); qqnorm(rnorm(1000)); qqnorm(rnorm(1000))
data <- read.table("C:\\Users\\qwert\\Documents\\data.txt")
data
Mean = mean(data)
Mean
Median = median(data)
Median
STDEV = sd(data)
STDEV
str(data)
data_vec <- as.vector(data)
data_vec
rownames(data)
mean(data_vec)
mean(data_vec$V1)
mean(data$V1)
colnames(data)<- "entries"
data
with(data, mean(entries))
data <- read.table("C:\\Users\\qwert\\Documents\\data.txt")
data
# rename the column
colnames(data)<- "entries"
data
mean_data = with(data, mean(entries))
mean_data
median_data = with(data, median(entries))
median_data
sd_data = with(data, sd(entries))
sd_data
# frequency plot
with(data plot(entries)
# frequency plot
with(data,plot(entries))
with(data, table(entries))
View(with(data, table(entries)))
# frequency plot
freq_table <- with(data, table(entries))
View(freq_table)
plot(freq_table)
?plot()
class(freq_table)
with(freq_table, plot(x = entries, y = freq))
str(freq_table)
barplot(freq_table)
hist(freq_table)
View(freq_table)
with(freq_table, plot(x = entries, y = Freq))
plot(freq_table$entries, freq_table$Freq)
data_freq <- as.dataframe(freq_table)
data_freq <- asdata.frame(freq_table)
data_freq <- as.data.frame(freq_table)
plot(data_freq$entries, data_freq$Freq)
View(data_freq)
?hist()
hist(data_freq$entries, freq=True)
hist(data$entries, freq=True)
hist(data$entries, freq=TRUE)
freq_plot(hist(data$entries, freq=TRUE, prob = TRUE))
freq_plot<-hist(data$entries, freq=TRUE, prob = TRUE)
freq_plot<-hist(data$entries, freq=TRUE, prob = TRUE)
freq_plot<-hist(data$entries, freq=TRUE)
lines(density(freq_plot))
lines(density(data_freq$Freq))
q()
any(grepl("ggplot2", installed.packages()))
?grepl()
library("MASS")
library("ggplot2")
str(Cars93)
head(Cars93)
#Exploring the data.
ggplot(Cars93, aes(x=Horsepower))+
geom_histogram(color="black", fill="white",binwidth = 10)+
facet_wrap(~Origin)
#Exploring the data.
ggplot(Cars93, aes(x=Horsepower))+
geom_histogram(color="black", fill="white",binwidth = 10)+
facet_wrap(~Origin)
#Exploring the data.
ggplot(Cars93, aes(x=Horsepower))+
geom_histogram(color="black", fill="red",binwidth = 10)+
facet_wrap(~Origin)
ggplot(Cars93, aes(x=Horsepower)) +
geom_density() +
facet_wrap(~Origin)
library(Rcpp)
cppFunction(
'int add(int x, int y, int z){
int sum = x + y + z;
return sum;
}'
)
add(1, 2, 3)
cppFunction(
'int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
)
cppFunction(
'int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}'
)
cppFunction(
'int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}'
)
signC(-6)
sumR <- function(x) {
total <- 0
for (i in seq_along(x)) {
total <- total + x[i]
}
total
}
cppFunction(
'double sumC(NumericVector x) {
int n = x.size();
double total = 0;
for (int i = 0; i < n; ++i) {
total += x[i];
}
return total;
}'
)
x <- runif(1e3)
bench::mark()
sum(x)
sumC(x)
sumR(x)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
lm.fit=lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
# finding pieces of information stoed in lm.fit
names(lm.fit)
# extractor functions
coef(lm.fit)
cofint(lm.fit)
confint(lm.fit)
# producing CIs and PIs for the
# prediction of medv for a given value of lstat
predict(lm.fit, data.frame(lstat=(c(5, 10, 15))),
interval = "confidence")
predict(lm.fit, data.frame(lstat=(c(5, 10, 15))),
interval = "prediction")
plot(lstat, medv)
attach(Boston)
plot(lstat, medv)
plot(lstat, medv)
abline(lm.fit)
# Additional plotting objects
abline (lm.fit ,lwd =3)
abline (lm.fit ,lwd =3, col ="red ")
plot(lstat ,medv ,col ="red ")
plot(lstat ,medv ,pch =20)
plot(lstat ,medv ,pch ="+")
plot (1:20 ,1:20, pch =1:20)
# Diagnostic plots
par(mfrow =c(2,2))
plot(lm.fit)
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
# Multiple Regression
lm.fit = lm(medv~lstat + age, data=Boston)
summary(lm.fit)
# short hand on all the variables contained in the Boston dataset
lm.fit=lm(medv~., data = Boston)
summary(lm.fit)
any(grepl("car", installed.packages()))
library("Car")
library("car")
summary(mm.fit1)
summary(lm.fit1)
lm.fit1 = lm(medv~. age, data=Boston)
summary(lm.fit1)
lm.fit1 = lm(medv~.-age, data=Boston)
summary(lm.fit1)
# Alternatively you can use the update() function
lm.fit1 = update(lm.fit, ~.-age)
summary(lm.fit1)
# Interaction terms
summary(lm(medv~lstat*age, data = Boston))
# Non-linear Transformation of the Predictors
lm.fit2 = lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit = lm(medv~lstat)
anova(lm.fit, lm.fit2)
par(mfrow=c(2, 2))
plot(lm.fit2)
library(Shiny)
library(shiny)
getwd()
setwd("C:/Users/qwert/Documents/Rworkdir")
getwd()
getwd()
setwd("C:/Users/qwert/Documents/Rworkdir/Shinydir")
getwd()
library(shiny)
setwd("C:/Users/qwert/Documents/Rworkdir/")
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
fluidPage(
sliderInput(inputId = "number",
label = "Select a number",
value = 500, min = 25, max = 1000),
plotOutput("hist")
)
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('shinydir1/uniformRandom')
runApp('shinydir/uniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir2/StandardNormalVariates_ggplot2')
runApp('~/RWorkdir/Shinydir/UniformRandom')
runApp('~/RWorkdir/Shinydir2/StandardNormalVariates_ggplot2')
runApp('~/RWorkdir/Shinydir/UniformRandom')
df <- data.frame <- (rnorm(input$number, mean = 0, sd = 1))
df <- data.frame <- (rnorm(1000, mean = 0, sd = 1))
df
edit(df)
class(df)
is.data.frame(df)
View(as.data.frame(df))
edit(df)
View(as.data.frame(df))
runApp('~/RWorkdir/Shinydir2/StandardNormalVariates_ggplot2')
runApp('~/RWorkdir/Shinydir2/StandardNormalVariates_ggplot2')
runApp('~/RWorkdir/Shinydir2/StandardNormalVariates_ggplot2')
df <- data.frame(rnorm(input$number, mean = 0, sd = 1))
df <- data.frame(rnorm(1000, mean = 0, sd = 1))
df
edit(df)
str(df)
??rnorm
??rnorm
x = ts(cases)
d_data <- read.csv(file = "C:\\Users\\qwert\\Desktop\\Assignments\\New folder\\covid2.csv")
covid_data
cases <- covid_data$cases
tests <- covid_data$tests
plot.ts(diff(cases))
plot.ts(diff(tests))
covid_data <- read.csv(file = "C:\\Users\\qwert\\Desktop\\Assignments\\New folder\\covid2.csv")
covid_data
cases <- covid_data$cases
tests <- covid_data$tests
plot.ts(diff(cases))
plot.ts(diff(tests))
x = ts(cases)
plot(x, type = "b")
library(asta)
library(astsa)
lag1.plot(x, 1)
install.packages("KFAS")
install.packages("KFAS")
x
SSMarima(ar = c(1, 0, 0), d = 1)
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3, ynames = cases_ts[-1]) +
SSMarima(ar = c(1, 0, 0), d = 1)
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3, ynames = cases_ts[-1]) +
SSMarima(ar = c(1, 0, 0), d = 1))
data <- read.csv(file = "C:\\Users\\qwert\\Desktop\\Assignments\\New folder\\covid2.csv")
covid_data
cases <- covid_data$cases
tests <- covid_data$tests
plot.ts(diff(cases))
plot.ts(diff(tests))
cases_ts = ts(cases[-1])
plot(cases_ts, type = "b")
library(astsa)
lag1.plot(case_ts, 1)
lag1.plot(cases, 1)
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3, ynames = cases_ts) +
SSMarima(ar = c(1, 0, 0), d = 1))
library(KFAS)
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3, ynames = cases_ts) +
SSMarima(ar = c(1, 0, 0), d = 1))
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3, ynames = cases_ts) +
SSMarima(ar = c(1, 0, 0), d = 1, stationary = FALSE))
model_int <- SSModel(cases_ts ~ SSMtrend(degree = 3) +
SSMarima(ar = c(1, 0, 0), d = 1, stationary = FALSE))
summary(model_int)
fit <- fitSSM(inits = rep(var(case_ts)/5, 2), model = model_int,
updatefn = update_model, checkfn = check_model)
fit <- fitSSM(inits = rep(var(cases_ts)/5, 2), model = model_int,
updatefn = update_model, checkfn = check_model)
library
library
library
library
library
library
library
library
library
library
